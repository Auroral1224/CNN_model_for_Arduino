#include <EloquentTinyML.h>
#include <eloquent_tinyml/tensorflow.h>

// model.h contains the array you exported from Python with xxd or tinymlgen
#include "pruned_model.h"

#define N_INPUTS 28*28
#define N_OUTPUTS 10
// in future projects you may need to tweak this value: it's a trial and error process
#define TENSOR_ARENA_SIZE 102400

Eloquent::TinyML::TensorFlow::TensorFlow<N_INPUTS, N_OUTPUTS, TENSOR_ARENA_SIZE> tf;

void setup() {
    Serial.begin(115200);
    delay(4000);
    tf.begin(digits_model);

    // check if model loaded fine
    if (!tf.isOk()) {
      Serial.print("ERROR: ");
      Serial.println(tf.getErrorMessage());

      while (true) delay(1000);
    }
    else
      Serial.print("Tensorflow model loaded. Inferencing...\n");
}

void loop() {
      
    float x_test[28*28] = {};
    int   y_test = 5;
    float y_pred[10] = {0};

    uint32_t start = micros();

    tf.predict(x_test, y_pred);

    uint32_t timeit = micros() - start;

    Serial.print("It took ");
    Serial.print(timeit);
    Serial.print(" micros to run inference.\n");

    Serial.print("The input is : ");
    Serial.print(y_test);
    Serial.print("\nPredicted probabilities are: \n");

    for (int i = 0; i < 10; i++) {
        Serial.print(i);
        Serial.print(" : ");
        Serial.print(y_pred[i]);
        Serial.print('\n');
    }

    Serial.print("Predicted class is: ");
    Serial.print(tf.probaToClass(y_pred));
    Serial.print("\nSanity check: ");
    Serial.print(tf.predictClass(x_test));

    Serial.print("\nInference ended.");
    while (true) delay(10000);
}
